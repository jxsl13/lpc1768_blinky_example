[platformio]
default_envs = stm32f407vg

[common]

default_src_filter = 
  +<*> 
  -<.git/> 
  -<.svn/> 
  -<example/> 
  -<examples/> 
  -<test/> 
  -<tests/> 
  -<target/>
  -<controllers/>
  -<shared/>

# C++17 is needed for inline static definitions.
# if no inline static is used, these flags can be omitted
build_flags =
  -std=c++1z
  -std=gnu++1z

# platformIO seems to have an inconsistent behaviour in regard to the
# starting directory. sometimes controllers/ needs to be prefixed with src/ 
# and sometimes it doesn't need to

[env:stm32f407vg]
platform = ststm32
board = disco_f407vg
;framework = cmsis

src_filter = 
  ${common.default_src_filter} 
  +<controllers/stm32f407vg/>

build_type = debug
build_flags = 
  ${common.build_flags}
  -D STM32F407VG
  -D stm32f407vg
  -D DEBUG
 ;-Wl,-T"scripts/controllers/stm32f407vg/STM32F407VG.ld"

upload_protocol = stlink
upload_port = /dev/cu.usbmodem14103
debug_tool = stlink


[env:lpc1768]
platform = nxplpc
board = lpc1768

src_filter = 
  ${common.default_src_filter} 
  +<controllers/lpc1768/>

build_type = debug
build_flags = 
  ${common.build_flags}
  -Wl,-T"scripts/controllers/lpc1768/LPC1768.ld"
  -D LPC1768
  -D lpc1768
  -D MCB1760 
  -D DEBUG

extra_scripts = scripts/controllers/lpc1768/firmware_patch.py

# J-Link Probe
upload_protocol = jlink-jtag
debug_tool = jlink


# ULINK-ME Probe - the probe that comes with the development board, literally not usable
;upload_protocol = custom
;upload_flags =
;    -f
;    scripts/interface/cmsis-dap.cfg
;    -f
;    scripts/board/mcb1700.cfg
;
;debug_tool = custom
;debug_server =
;    $PLATFORMIO_CORE_DIR/packages/tool-openocd/bin/openocd
;    -f
;    ../scripts/interface/cmsis-dap.cfg
;    -f
;    ../scripts/board/mcb1700.cfg


# Blackmagic Probe - open source is sometimes not the best solution, as it took ages to find a working BMP firmware that works with the board.
;upload_protocol = blackmagic
;upload_port = /dev/cu.usbmodem79AC68971
;
;debug_tool = custom
;debug_port = /dev/cu.usbmodem79AC68971
;debug_init_cmds =
;  target extended-remote $DEBUG_PORT
;  monitor swdp_scan
;  attach 1
;  set mem inaccessible-by-default off
;  $INIT_BREAK
;  $LOAD_CMDS


[env:atmega328p]
platform = atmelavr
board = ATmega328P

src_filter = 
  ${common.default_src_filter} 
  +<controllers/atmega328p/>

build_type = debug
# build and debugging flags
build_flags = 
  ${common.build_flags}
  -D ATMEGA328P
  -D atmega328p
  -D DEBUG

# upload port.
upload_port = /dev/cu.SLAB_USBtoUART
upload_protocol = avr911
upload_speed = 19200
upload_flags = -e



#[env:Arduino_UNO]
;platform = atmelavr
;board = uno

;src_filter = 
  ;${common.default_src_filter} 
  ;+<controllers/ARDUINO_UNO/>

;build_type = debug

# build and debugging flags
;build_flags = 
  ;${common.build_flags}
  ;-D ARDUINO_UNO
  ;-D DEBUG

# upload port.
;upload_port = /dev/cu.usbmodem14101

